[[general-recommendations]]
== 一般建议

[float]
[[large-size]]
=== 不要返回大的结果集

Elasticsearch 被设计成一个搜索引擎，当返回对应查询的前面文档时具有很好的性能。然而，它并不适用于数据库领域的负载，例如检索与特定查询匹配的所有文档。如果你需要这样操作, 请确保使用  <<search-request-scroll,Scroll>> 接口。

[float]
[[maximum-document-size]]
=== 避免大文档

鉴于默认 <<modules-http,`http.max_content_length`>> 设置成 100MB, Elasticsearch 会拒绝索引任何大于 100MB 的文档。你可能会决定增加该特定设置，但是 Lucene 仍然有个 2GB 左右的限制。

即使不考虑分片的限制，大文档通常不实际。即使是不请求 `_source` 的搜索请求，大文档也会给网络、使用内存和磁盘造成压力，因为在所有情况下，Elasticsearch 需要获取文档 `_id`。同时，由于文件系统缓存的工作方式，在大文档中获取该字段的成本更大。索引此文档使用的内存量是原始文档大小的倍数。邻近搜索（例如短语查询）和<<search-request-highlighting,高亮>>也会变得更昂贵，因为他们的成本也直接取决于原始文档的大小。

有时重新考虑信息单位应该是什么形式是有益的。例如，实际你想让一本书可以被检索并不意味着文档需要由整本书组成。用一章节甚至是一小段作为文档，然后有一个属性在这些文件中,确定他们属于哪本书或许是个好主意。这样不仅避免大文档问题，还能使搜索体验更好。例如，如果一个用户搜索两个词 `foo` 和 `bar`。不同章节之间的匹配可能非常糟糕，而同一段中的匹配可能效果很好。