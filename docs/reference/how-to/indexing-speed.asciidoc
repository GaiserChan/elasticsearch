[[tune-for-indexing-speed]]
== 调整索引速度

[float]
=== 使用批量请求

与单文档索引请求相比，批量请求的性能好得多。为了了解批量请求的最佳大小, 应在具有单个分片的单个节点上运行基准测试。首先尝试一次索引 100 个文档，然后 200 个，400 个，等等。在每次基准运行中，批量请求的文档数增加一倍。当索引速度开始平稳时，就知道你数据的批量请求已经达到最优值。在相同情况下, 最好是在文件太少的方向上犯错, 而不是文件太多。请注意, 当同时发送大量请求时, 过大的批量请求可能会使集群存在内存压力。因此, 即使较大的请求似乎性能更好, 也应避免每个请求超过几十兆字节。

[float]
=== 使用多线程将数据发送到 Elasticsearch

发送批量请求的单个线程不可能最大限度地发挥 Elasticsearch 集群的索引能力。为了使用集群的所有资源，你需要使用多线程或者进程发送数据。除了更好地利用集群的资源外, 这还有助于降低每个文件同步的成本。

务必监控 `TOO_MANY_REQUESTS (429)` 响应码（Java 客户端的 EsRejectedExecutionException）。这是 Elasticsearch 告诉你它不能跟上索引速度的方式。当它发生时, 您应该暂停索引, 然后再试一次, 理想情况下随机指数回退。

与调整批量请求的大小类似，只有测试才能判断线程的最佳数量。这可以通过逐步增加工作线程数量来进行测试, 直到 I/O 或 CPU 在集群上饱和为止。

[float]
=== 增加刷新间隔

默认的 <<dynamic-index-settings,`index.refresh_interval`>> 是 1s，这强制 Elasticsearch 每秒创建一个新的段。增加这个值（例如，`30s`）将允许较大的段刷新并且减小未来合并的压力。

[float]
=== 初始化时禁止刷新和创建副本

如果你需要一次加载大量的数据，你应该通过设置 `index.refresh_interval` 等于 `-1` 禁用刷新，并且设置 `index.number_of_replicas` 等于 `0`。这些设置将暂时使索引处于危险之中, 因为任何分片的丢失都会导致数据丢失。但是与此同时索引速度会变得更快，因为文档仅会被索引一次。一旦初始化加载完成，你可以将 `index.refresh_interval` 和 `index.number_of_replicas` 改回原始值。

[float]
=== 禁用swapping

通过 <<setup-configuration-memory,disabling swapping>> 设置，你需要确保操作系统没有交换出 java 进程。

[float]
=== 将内存给文件系统缓存

为了缓冲区 I/O 操作会使用文件系统缓存。你需要确保运行 Elasticsearch 的机器至少将一半的内存给文件系统缓存。

[float]
=== 使用自动生成的 ids

具有显示 id 的文档索引时，Elasticsearch 需要检查具有相同 id 的文档在同一分片中是否已存在。这是一个昂贵的操作，并随着索引的增长会消耗更大。通过使用自动生成的 ids，Elasticsearch 可以跳过这个检查，这会使得索引更快。

[float]
=== 使用更快的硬件

如果索引时受 I/O 瓶颈，你应考虑为文件系统缓存提供更多的内存（见上面），或者购买更快的驱动器。特别地，都知道 SSD 驱动器比机械转盘驱动器有更好的性能。始终使用本地存储，应该避免例如 `NAS` 或者 `SMB` 等远程文件系统。此外虚拟存储例如亚马逊的 `Elastic Block Storage` 也要小心。虚拟化存储在 Elasticsearch 工作的很好，同时它快速和简单的设置也是具有吸引力的，但不幸的是, 与本地专用的存储相比, 它在持续的基础上本质上也是较慢的。你如果在 `EBS` 上放置索引, 请确保使用预置的 IOPS, 否则操作可能会被迅速限制。

通过配置 RAID 0 阵列, 在多个 SSD 上进行索引。注意，这将增加故障的风险，因为任何一块 SSD 损坏都会破坏索引。但是通常正确的权衡是：优化单个分片以获得最大性能，然后在不同节点之间添加分片，这样任何节点故障数据都会有冗余。你也可以使用 <<modules-snapshots,快照和恢复>>来备份索引，以获得进一步的保障。

[float]
=== 索引缓冲区大小

如果你的节点只执行重量级索引，确保你的 <<indexing-buffer,`indices.memory.index_buffer_size`>> 足够大，每个分片最多使用 512 MB 索引缓冲区执行重量级索引（超过该值索引性能通常不会提高）。Elasticsearch 使用该设置（java 堆内存的百分比或者绝对字节大小）并将其用作跨活动分片的共享缓冲区。非常活跃的分片自然比执行轻量级索引的分片使用更多的缓冲区。

通常足够的默认值是 ‘10%’，例如，如果你给 JVM 10GB 的内存，将会分 1GB 给索引缓冲区。这足以承载两个重量级索引的分片。

[float]
=== 禁用 `_field_names`

<<mapping-field-names field,`_field_names` 字段>> 增加了索引的时间开销，如果不需要执行 ‘exits’ 查询，你可以禁用该字段。

[float]
===  其他优化

在<<调整磁盘使用>>章节概述的策略也提高了索引的速度。